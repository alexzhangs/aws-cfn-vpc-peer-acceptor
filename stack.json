{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template to create necessary resources for the acceptor of VPC peer connection.",
  "Resources": {
    "IamPeerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Principal": {"AWS": "*"},
              "Action": ["sts:AssumeRole"],
              "Effect": "Allow"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "default",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "ec2:AcceptVpcPeeringConnection",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "SqsPeerRouteDeadQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": {"Fn::Sub": "${AWS::StackName}-SqsPeerRouteDeadQueue"},
        "ReceiveMessageWaitTimeSeconds": "20",
        "VisibilityTimeout": "30"
      }
    },
    "SqsPeerRouteQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": {"Fn::Sub": "${AWS::StackName}-SqsPeerRouteQueue"},
        "ReceiveMessageWaitTimeSeconds": "20",
        "VisibilityTimeout": "30",
        "RedrivePolicy": {
          "deadLetterTargetArn": {"Fn::GetAtt": ["SqsPeerRouteDeadQueue", "Arn"]},
          "maxReceiveCount": "3"
        }
      }
    },
    "SqsPeerRouteQueuePolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": ["sqs:SendMessage"],
              "Resource": {"Fn::GetAtt": ["SqsPeerRouteQueue", "Arn"]}
            }
          ]
        },
        "Queues": [
          {"Ref": "SqsPeerRouteQueue"}
        ]
      }
    },
    "LambdaPeerRouteQueueSubscriberExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": ["lambda.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"],
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "default",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateRoute",
                    "ec2:DeleteRoute"
                  ],
                  "Resource": {"Fn::Join": ["", ["arn:aws:ec2:*:*:route-table/", {"Ref": "RouteTableId"}]]}
                }
              ]
            }
          }
        ]
      }
    },
    "LambdaPeerRouteQueueSubscriber": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "Receive SQS messages from VPC peer connection requester, add corresponding ruote entry on peer connection created, and remove on deleted.",
        "Code": { "ZipFile": { "Fn::Join": [ "\n", [
          "#!/usr/bin/env python",
          "",
          "import os",
          "import json",
          "import boto3",
          "",
          "print('Loading function')",
          "",
          "def lambda_handler(event, context):",
          "    print('Received event: ' + json.dumps(event))",
          "    session = boto3.Session(region_name=os.getenv('REGION'))",
          "    ec2 = session.resource('ec2')",
          "    route_table = ec2.RouteTable(os.getenv('ROUTE_TABLE_ID'))",
          "    result = []",
          "",
          "    for record in event['Records']:",
          "        payload = record['body']",
          "        if isinstance(payload, dict):",
          "            pass",
          "        elif isinstance(payload, str):",
          "            payload = json.loads(payload)",
          "        else:",
          "            print('Invalid message payload found')",
          "            return false",
          "",
          "        request_type = payload['request_type']",
          "        if request_type == 'Create':",
          "            route = route_table.create_route(",
          "                DestinationCidrBlock=payload['peer_requester_cidr'],",
          "                VpcPeeringConnectionId=payload['peer_connection_id']",
          "            )",
          "            route = route.__dict__",
          "            route.pop('meta')",
          "            result.append(route)",
          "        elif request_type == 'Delete':",
          "            route = ec2.Route(route_table.id, payload['peer_requester_cidr'])",
          "            import botocore",
          "            try:",
          "                route.delete()",
          "                route = route.__dict__",
          "                route.pop('meta')",
          "                result.append(route)",
          "            except botocore.exceptions.ClientError as e:",
          "                if e.response['Error']['Code'] == 'InvalidRoute.NotFound':",
          "                    pass",
          "                else:",
          "                    raise e",
          "        print(result)",
          "",
          "    return result"
        ] ] } },
        "Environment": {
          "Variables": {
            "REGION": {"Ref": "AWS::Region"},
            "ROUTE_TABLE_ID": {"Ref": "RouteTableId"}
          }
        },
        "Handler": "index.lambda_handler",
        "Runtime": "python3.7",
        "Timeout": "15",
        "Role": {"Fn::GetAtt": ["LambdaPeerRouteQueueSubscriberExecutionRole", "Arn"]}
      }
    },
    "EventSourceMapping": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "EventSourceArn": {"Fn::GetAtt": ["SqsPeerRouteQueue", "Arn"]},
        "FunctionName": {"Fn::GetAtt": ["LambdaPeerRouteQueueSubscriber", "Arn"]}
      }
    }
  },
  "Parameters": {
    "RouteTableId": {
      "Type": "String",
      "Default": "",
      "Description": "Route Table ID of the VPC peer acceptor."
    }
  },
  "Outputs": {
    "IamPeerRoleArn": {
      "Value": {"Fn::GetAtt": ["IamPeerRole", "Arn"]}
    },
    "SqsPeerRouteQueueUrl": {
      "Value": {"Ref": "SqsPeerRouteQueue"}
    }
  }
}
